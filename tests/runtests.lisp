(load "../src/init.lisp")

; error routine
(define ERROR (lambda (what) (begin (write "FAILED " what "\n") (quit))))

(if (null? ()) 'OK (ERROR 'null?))
(if (number? 1) 'OK (ERROR 'number?))
(if (symbol? 'a) 'OK (ERROR 'symbol?))
(if (string? "a") 'OK (ERROR 'string?))
(if (pair? '(1 . 2)) 'OK (ERROR 'pair?))
(if (list? ()) 'OK (ERROR 'list?))
(if (list? '(1 2)) 'OK (ERROR 'list?))
(if (equal? () ()) 'OK (ERROR 'equal?))
(if (equal? 1 1) 'OK (ERROR 'equal?))
(if (equal? 'a 'a) 'OK (ERROR 'equal?))
(if (equal? "a" "a") 'OK (ERROR 'equal?))
(if (equal? '(1 2) '(1 2)) 'OK (ERROR 'equal?))
(if (eq? (abs 1) 1) 'OK (ERROR 'abs))
(if (eq? (abs -1) 1) 'OK (ERROR 'abs))
(if (eq? (frac 1.5) .5) 'OK (ERROR 'frac))
(if (eq? (frac -1.5) -.5) 'OK (ERROR 'frac))
(if (eq? (int 1.5) 1) 'OK (ERROR 'int))
(if (eq? (int -1.5) -1) 'OK (ERROR 'int))
(if (eq? (floor 1.5) 1) 'OK (ERROR 'floor))
(if (eq? (floor -1.5) -2) 'OK (ERROR 'floor))
(if (eq? (ceiling 1.5) 2) 'OK (ERROR 'ceiling))
(if (eq? (ceiling -1.5) -1) 'OK (ERROR 'ceiling))
(if (eq? (round 1.5) 2) 'OK (ERROR 'round))
(if (eq? (round -1.5) -2) 'OK (ERROR 'round))
(if (eq? (mod 3 2) 1) 'OK (ERROR 'mod))
(if (eq? (gcd 1776 42) 6) 'OK (ERROR 'gcd))
(if (even? 42) 'OK (ERROR 'even?))
(if (odd? 41) 'OK (ERROR 'odd?))
(if (eq? (length ()) 0) 'OK (ERROR 'length))
(if (eq? (length '(1 2)) 2) 'OK (ERROR 'length))
(if (equal? (append '(1 2) '(3 4)) '(1 2 3 4)) 'OK (ERROR 'append))
(if (equal? (nthcdr '(1 2 3 4) 2) '(3 4)) 'OK (ERROR 'nthcdr))
(if (equal? (nth '(1 2 3 4) 2) 3) 'OK (ERROR 'nth))
(if (equal? (reverse '(1 2 3 4)) '(4 3 2 1)) 'OK (ERROR 'reverse))
(if (equal? (member 3 '(1 2 3 4)) '(3 4)) 'OK (ERROR 'member))
(if (eq? (foldr - 0 '(1 2 3 4)) -2) 'OK (ERROR 'foldr))
(if (eq? (foldl - 0 '(1 2 3 4)) 2) 'OK (ERROR 'foldl))
(if (eq? (min 1 2 3 4) 1) 'OK (ERROR 'min))
(if (eq? (max 1 2 3 4) 4) 'OK (ERROR 'max))
(if (equal? (filter odd? '(1 2 3 4)) '(1 3)) 'OK (ERROR 'filter))
(if (all? odd? '(1 3)) 'OK (ERROR 'all?))
(if (any? odd? '(1 2 3 4)) 'OK (ERROR 'any?))
(if (equal? (mapcar odd? '(1 2 3 4)) '(#t () #t ())) 'OK (ERROR 'mapcar))
(if (equal? (map + '(1 2) '(3 4)) '(4 6)) 'OK (ERROR 'map))
(if (equal? (zip '(1 2) '(3 4)) '((1 3) (2 4))) 'OK (ERROR 'zip))
(if (equal? (seq 0 4) '(0 1 2 3)) 'OK (ERROR 'seq))
(if (equal? (seqby 4 0 -1) '(4 3 2 1)) 'OK (ERROR 'seqby))
(if (equal? (range 1 4) '(1 2 3)) 'OK (ERROR 'range))
(if (equal? (range 1 4 2) '(1 3)) 'OK (ERROR 'range))
(if (eq? ((curry + 1) 2 3) 6) 'OK (ERROR 'curry))
(if (eq? ((compose car cdr) '(1 2)) 2) 'OK (ERROR 'compose))
(if (eq? ((Y (lambda (f) (lambda (k) (if (< 1 k) (* k (f (- k 1))) 1)))) 5) 120) 'OK (ERROR 'Y))

(load "../examples/case.lisp")

(if (eq? (case 2 (1 'a) (2 'b) (3 'c)) 'b) 'OK (ERROR 'case))

(load "../examples/dolist.lisp")

(define sum 0)
(dolist (x (seq 1 4)) (setq sum (+ sum x)))
(if (eq? sum 6) 'OK (ERROR 'dolist))

(load "../examples/when.lisp")

(if (eq? (when (< 0 0) 1 2) ()) 'OK (ERROR 'when))
(if (eq? (when (< 0 1) 1 2) 2) 'OK (ERROR 'when))

(load "../examples/unless.lisp")

(if (eq? (unless (< 0 0) 1 2) 2) 'OK (ERROR 'unless))
(if (eq? (unless (< 0 1) 1 2) ()) 'OK (ERROR 'unless))

(write "Running nqueens test, this can take a long time with DEBUG...\n")
(load "../examples/nqueens.lisp")

(write "SUCCESS\n")
(quit)
